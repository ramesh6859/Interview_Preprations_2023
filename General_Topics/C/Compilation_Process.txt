Compilation Process
1.  Preprocessing
    1.  All the lines starting with # will be interpreted.
    2.  Output is .i file. 
2.  Compilation
    1.  .i file is converted to assembly instructions .s file.  
    2.  Checks for syntax error.
    3.  Optionally optimise code.
3.  Assembly
    1.  Assembler converts .s file to object file .o file.
    2.  Contains actual instructions to be executed.
    3.  No linkage to other object files.
4.  Linking
    1.  Linking for their original function calls.
    2.  Library function calls are added.
    3.  Generate final executable .exe, .elf, .bin, .hex

.bin File Properties
1.  It has no memory reallocation.
2.  Data loaded directly to specified address.
3.  No symbol or debug info.
4.  Not in human readable format.
5.  Option to decode with Hex Dump Tool.

Cross Compilation
1.  List file (.lst)
    1.  Contains information about the cross compilation process, cross compiler details.
    2.  Contains 2 sections
        1.  Page header.
        2.  Command line
    3.  Work as index path for the program.
2.  Preprocessor Output File
    1.  Used for verifying the operations of Macros and conditional preprocessor directives.
    2.  File extension is cross compiler dependent.
3.  Object file (.obj)
    1.  Deals with data records for symbolic information, object code and debugging.
    2.  Details stored are
        1.  Reserved memory for global variables.
        2.  Public symbol (variable and function) names.
        3.  External symbol (variable and function) references.
        4.  Library files which to link.
        5.  Debugging information to help synchronize source lines with object code.
4.  Map file (.map)
    1.  Work as Linker file.
    2.  Details stored are
        1.  Page header.
        2.  Command Line.
        3.  CPU details.
        4.  Input Modules.
5.  Hex File (.hex)
    1.  Binary executable file created from the source code.
