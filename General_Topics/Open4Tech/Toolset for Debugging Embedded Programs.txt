The basic functionality needed for debugging a program include:
    1.  set/remove breakpoints
    2.  step-by-step execution
    3.  read values from memory addresses

The following components are required for enabling the debug functionalities:
    1.  Target device (Microcontroller)
    2.  Debug probe
    3.  Debug software (debug server/debug client)

Target Device
    The target device is the microcontroller (MCU) on which our embedded application will be run. Debugging a program, while it is running on the target device is known as on-chip debugging. For supporting such functionality the MCU must have dedicated hardware resources. These resources include a dedicated interface (JTAG, SWD, etc.), internal hardware units allowing functionalities such as memory reads, program execution control (watchpoints, breakpoints, step-by-step execution, etc.).

    Almost all microcontrollers today support the basic on-chip debugging functionalities. Depending on the complexity of the application, additional extended debug functionalities may be needed, so make sure to check the debug capabilities when choosing the MCU for your next project.

Debug Probe
    As we already established, the on-chip debugging requires a dedicated communication interface. These interfaces are not available on desktop computers, and an additional component called debug probe (aka debug adapter, programmer) is needed.

    The function of the debug probe is to interpret the commands from the USB and relate them to the target device (MCU) using a specific communication interface protocol (e.g JTAG, SWD). It is important to note that a debug probe must be aware of the CPU it is communicating to. Usually, debug probes are provided by the MCU vendor. For popular CPU cores such as ARM, there are third-party probes available (e.g J-Link, ULINK, PowerDebug, etc.).

    In recent years there is a trend that a debug adapter is implemented as part of the entry-level development and evaluation boards for MCUs. This approach reduces the cost for developers, as the only thing you need to start debugging is a development board and a host computer with a proper software toolchain.

Software Toolchain
    The last piece of the debug toolset is the computer software we use to communicate with the debug probe and control the debug process. One of the most popular debug software is the GDB debugger.

GBD Server/Client Setup
    GDB is the most popular choice for embedded systems debugging as it can be run on a host computer and the application that has to be debugged can be run on the target device. This is made possible by the GDB server (gbdserver) and the “GDB Remote Serial Protocol”. The GDB Remote Serial Protocol (RSP) provides a high level protocol allowing GDB to connect to any target remotely. If a target’s architecture is defined in GDB and the target implements the server side of the RSP protocol, then the debugger will be able to connect remotely to that target. In the most common embedded environment setup, a gbdserver can’t be run on the actual target device, instead, it is run on the same host computer as the GDB client. The server and the client communicate using the GBD Remote Serial Protocol via TCP/IP connection. The debug server must be aware of the specific probe commands and the target MCU that is going to be debugged. Some of the popular GDB debug servers are:
    1.  OpenOCD
    2.  JLinkGBD
    3.  ST-Link GBD

    The GDB client issues commands to the gdbserver, requestioning information or an action that has to be performed. The interface to the client can be:
    1.  GUI that has different views showing you memory, registers, and all kinds of visual debug related information.
    2.  Command line interface

    The GDB client for ARM microprocessors is arm-none-eabi-gbd.
