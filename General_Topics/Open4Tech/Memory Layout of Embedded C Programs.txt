The memory layout of C programs consists of several segments.
    Stack
    Heap
    Uninitialized Data Segment (.bss)
    Initialized Data Segment (.data)
    Code Segment (.txt)

Footnotes
    If storage class is not explicitly specified(that is, the extern or static keywords), then by default global variables have external linkage.

1.  Code Segment (.text):
    This segment stores the executable program code (the machine instructions). Variables defined with the const type qualifier can also be placed in the code segment. It is a read-only segment stored in a non-volatile memory. Depending on the platform it can be copied to a faster RAM memory or the program code can be executed in place (directly from the non-volatile memory).

2.  Initialized Data Segment (.data):
    This segment stores all global variables (with storage class specifier static or extern)1  and local (defined inside a function) static variables that have defined initial values different than zero. The segment’s size is determined by the size of the variables and is know at compile time. This segment can be further classified into initialized read-only area and initialized read-write area (storing data that can be altered at run time). This segment is copied from the non-volatile memory it is initially stored (e.g Flash) to RAM.

3.  Uninitialized Data Segment (.bss):
    This segment stores all global and local variables that are initialized to zero or do not have explicit initialization in the source code.  The memory locations of variables stored in this segment are initialized to zero before the execution of the program starts. This is usually performed by the boot code. Since the value of these variables are all zeroes, they do not have to be stored in a non-volatile memory.
    Example:
    Example for initialized and uninitialized data segments:
        #include<stdio.h>
        int variable_1=192;          /* Placed in initialized data segment */
        int variable_2;              /* Placed in uninitialized data segment*/
        int variable_3 = 0;          /* Placed in uninitialized data segment*/
        int main() { 
        static int variable_2=67; /* Static local variable also placed in the initialized data segment */ 
        /* ... Function code ... */ 

        }

4.  Heap:
    The heap is a segment of the system memory (RAM) that provides dynamic memory allocation. The heap grows upwards (starting after the data segment) and the stack grows downwards. The C language does not specify the minimum size or the location of the heap and the stack in the memory. There are two types of memory allocation:
    1.  Static allocation (in the data segment):
        1.  Memory for named variables is allocated at compile time
        2.  Exact size and type of storage is known at compile time
    2.  Dynamic allocation (in the heap segment):
        1.  Memory allocated during program execution
        2.  Exact amount of space does not have to be known at compile time
    
    Dynamic allocation usually requires two basic steps:
    1.  Creating the dynamic space
    2.  Creating a pointer holding the address for the newly created space (new variable names can’t be created while the program is running, so pointers are needed)

    Functions (part of stdlib library) for dynamic memory allocation and management:
    1.  malloc() and calloc( ) –  reserve space
    2.  realloc() –  move a reserved block of memory to another allocation of different dimensions
    3.  free() – release allocated space

    Heap Usage
    1.  When we need a data that must live after the function returns. Once data is stored on the heap during function execution it is not affected when the function ends
    2.  When we need a lot of memory
    3.  When we don’t know exactly how much data we will need to store during the execution of the program

    Heap Usage Pitfalls
    1.  Overwritten heap data
    2.  Allocation failures, when a too big buffer is requested to be allocated.
    3.  Heap is responsible for memory leaks
    4.  The C malloc() and free()  function can take a long time to execute, which is in conflict with the real-time constraints of an embedded system
    5.  Heap memory management requires additional memory as the algorithms need to store some form of header information for each allocated block

5.  Stack:
    In general we can describe the stack segment as a temporary storage for data. The access to data in the stack is organized as Last In First Out (LIFO). The operation of adding data to the stack is called PUSH and the operation of retrieving data is called POP(PULL). The top element in the stack can be accessed (in the classic stack implementation). When a program enters a function, space is allocated on top of the stack. When the program leaves the function, the space is freed. The life span of variables on the stack is limited to the duration of the function.

    Stack Usage in Programming Languages:
    Each function is given its own section of memory to operate in. This section is a part of the stack and is referred to as a stack frame. It most commonly includes the following components:
    1.  The return address (when the function is complete it returns back to the function call)
    2.  Arguments passed to the function
    3.  Local variables of the function
    4.  Saved copies of any registers modified by the function that have to be restored

    Usage in Microprocessors:
    Underestimating stack usage can lead to serious issues such as overwritten variables, uninitialized pointers, and corrupted return addresses.
    