The transformation of the high level language (C, C++) source code to an executable file is referred to as build process and can be divided into three stages:
1.  Preprocessing (performed by the Preprocessor)
2.  Compilation (performed by the Compiler)
3.  Linking (performed by the Linker)

Preprocessing
    All transformations are lexical and the preprocessor performs them based on specific instructions called directives that begin with the #(hash) symbol. They can be used to instruct the preprocessor to skip part of a file, include another file, or define a constant or a macro. Some of the most common directives are #define, #include, #ifdef, #if, #else etc.
    Example:
    #include <stdio.h>
    #define UP_LIM 1000
    int var_1 = UP_LIM; //UP_LIM will be substituted with 1000 by the preprocessor
    void main()
    { 
    }

Compilation
    The compilation takes the preprocessed source code and generates a relocatable object file. This file contains machine code and additional control information that is used by the linking process to generate an executable object file. There can be compilation that outputs assembly language that is then passed through the assembly process (conversion of assembly language into machine code).

Linking
    The linking process links (bundles) together all of the different object files into a single executable object file that can be loaded into memory and executed. The object files that are linked are usually the output of the compiler and additional object files that may have been precompiled as part of some library used in the project. The linking process allows us to break our program into separate source files that are in turn smaller, managable and easier to maintain as they can be compiled separately and then merged by the linker.
    Example:
    If we use printf function (part of standard C library) in our code, the linker will use the already precompiled object file containing the function and merge it with the other object files.

