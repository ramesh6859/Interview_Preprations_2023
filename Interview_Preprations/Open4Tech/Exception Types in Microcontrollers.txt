Exceptions are events that disrupt the normal execution flow of the program. When an exception occurs the processor handles it by usually executing dedicated piece of code called exception handler. Each type of exception can have its own exception handler.

In some literature sources exceptions and interrupts are analyzed as two different things. Exceptions being generated internally by the microprocessors itself and interrupts being generated by external source (e.g hardware peripherals SPI, ADC, GPIO etc). For the sake of simplifying the categorization we are looking at the interrupts as a specific type of exception.

Types of exceptions
    There are many types of exceptions and they are usually dependent on the architecture of the processor. However there are exceptions that are found in almost every processor type.  Below are listed some of the most popular exception types.
    1.  Interrupt requests (IRQ):
        The source of this type of exception is a peripheral device and not the microprocessor itself. The peripheral device can be a module that is internal to the microcontroller (e.g analog to digital converter) or a device that is external to the microcontroller (e.g push button).
    2.  Faults:
        These events are detected by the processor and their source is an abnormal event. Examples:
        1.  Divide By Zero
        2.  Undefined instruction that the processor cannot decode. Potential reasons are
            1.  Use of instructions not supported by the microprocessor
            2.  Corrupted memory contents
        3.  Stack overflow
    3.  Supervisor call (SVC):
        SVCs are instructions that cause an exception. They are usually used to request an access to system resources (e.g hardware peripheral) from an operating system. Example:
        If we have a user code that needs to access a hardware peripheral (e.g ADC) the code will use SVC instruction and then an exception handler in the operating system will be executed and provide access to the desired hardware. Using this mechanism keeps the access to the hardware under the control of the operating system.
    4.  Reset:
        The source of this type of exception is the processor power-up sequence. This exception is an integral part of the start-up procedure of the embedded system.

What happens when an exception occurs
    1.  The program counter (PC) value is put into the stack
    2.  The reason for the exception can be stored in dedicated status registers
    3.  Exceptions can be disabled while the current one is being handled
    4.  Execute an exception handler routine for the current exception
