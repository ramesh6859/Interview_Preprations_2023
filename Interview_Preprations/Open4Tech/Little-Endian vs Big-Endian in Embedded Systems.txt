The memory space of a microprocessor is expected to be byte-addressable. When a CPU has a 32-bit address bus this means that it can access a total of 2^32 addresses each with a size of 1 byte. Programming languages have data types with sizes smaller than 32 bits. For example, the C language supports data types with 8-bit, 16-bit, 32-bit, 64-bit sizes. Modern 32-bit processors support 8-bit, 16-bit, and 32-bit transfers. There are memory access instructions for each supported data size. For example, ARM Cortex-M processors have the following versions of load instructions: LDRB (load byte), LDRH(load half word) LDR (load word), etc.

Endianess
    Endianness refers to the way bytes are ordered when a data item with a size bigger than 1 byte (e.g. 32-bit variable) is placed in memory or transmitted over a communication interface. There are two types of endianness:
    1.  Little-endian
        The bytes are ordered with the least significant byte placed at the lowest address.
    2.  Big-endian
        The bytes are ordered with the most significant byte placed at the lowest address.

    There is not a clear advantage of using one endianness format over the other. Many processors use big-endian and many use little-endian. There are also processors that can be configured to use one or the other. The endianness does not have a big impact on the microprocessor hardware implementation. As the endianness is relevant only on the operations that access data from the memory. The CPU registers and all other processor building blocks have no sense of endianness, they just operate on data of a certain size (e.g 32-bits). Once data is retrieved from the memory it is placed in the CPU registers properly â€“ for a 32-bit architecture the most significant bit is at position 31 and the least significant bit is at position 0.

Software Point of View
    Although we can write programs without knowing the type of endianness used by the processor, we should be aware of the following scenarios where little-endian and big-endian formats are important:
    1.  Communication between devices
        There are situations where the protocol for communication has different endianness that the processor. A common example is the internet protocol (TCP/IP) suite that is defined as big-endian. If used by a processor that is little-endian then we must make sure the endianness difference is taken into account and the byte order of the data to be sent/received is properly managed.
    2.  Accessing memory using pointers
        Endianness has an impact in cases when we use pointers and type casting.

Conclusion
    Endianness does not affect the way we write code, it does not even affect that much the way we design microprocessors. However, in some instances, little-endian and big-endian formats have the potential to cause issues if not properly taken care of. Knowing the endianness of the microprocessor, all devices, and communication protocols that are going to be used in an embedded system is highly recommended.
