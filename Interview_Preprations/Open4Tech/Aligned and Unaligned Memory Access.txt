Unaligned memory access is the access of data with a size of N number of bytes from an address that is not evenly divisible by the number of bytes N. If the address is evenly divisible by N, we have aligned memory access.

Express this as Address/N, where Address is the memory address and N is the number of bytes that are accessed. If the rightmost digit of the address (represented in a hexadecimal format) is divisible by the number of bytes, we have aligned memory access. Here are some examples:
    1.  Two byte access from address 4 : Address/N = 4/2 = 2  (aligned access)
    2.  Two byte access from address 3 : Address/N = 3/2 = 1.5 (unaligned access)
    3.  Four byte access from address 24 : Address/N = 24/4 = 6 (aligned access)

The unaligned access usually has a negative impact on the performance, as more operations (instruction) are required for performing it. In case unaligned access is not supported by the microprocessor, an exception can be triggered (e.g bus error exception) when such access is attempted.

Software Point of View
    Encounter unaligned memory access is when casting pointers from one type to another. Although the C language allows such castings, the result may cause undefined behavior. A pointer to an object or incomplete type may be converted to a pointer to a different object or incomplete type. If the resulting pointer is not correctly aligned for the referenced type, the behavior is undefined.

Compiler Specifics
    The C programming language classifies unaligned memory access as undefined behavior. The default behavior of the compiler when it comes to unaligned access is dependent on the target CPU architecture. If the architecture does not allow unaligned accesses, then the compiler will place all variables, functions, etc. in an aligned manner. If the CPU architecture allows unaligned access, then the compiler should have options where we can select whether it should take advantage of this or not. For example, gcc compiler has the following options for ARM processors that can be used: -munaligned-access -mno-unaligned-access.

    The attribute packed specifies that a type must have the smallest possible alignment. C objects that can be “packed” include unions, pointers, structures.

Hardware Point of View
    The limitations in regards to unaligned memory access are related to the way memories are structured and integrated in CPU-based systems. There is a limited amount of bits that can be accessed from a memory by a single read or write cycle. Two memory units with their pinout:
    1.  Memory 2k x 8
        This memory has a total of 2k (2048) addresses, selectable by bus A (lines A0 to A10). Each address can store a single byte accessible by bus D (lines D0 to D7).
    2.  Memory 2k x 32
        This memory has a total of 2k (2048) addresses, selectable by bus A (lines A0 to A10). Each address can store 4 bytes (32 bits) accessible by bus D (lines D0 to D31).

    Memories have specific interfaces (pinout) and connecting them to a bus requires additional logic. This logic is usually implemented in a memory controller unit that takes care of all low-level timing requirements for read/write operations. Another very important thing is the mapping of the memory unit into the available memory map (system address space). This is implemented using a decoder logic that takes as input an address from the system address space and decodes it to address values for the memory.

    There are two approaches for handling unaligned accesses:
    1.  Break up the access into multiple accesses
        This can be done by the memory controller. The downside of this approach is the additional time required for performing the operation.
    2.  Restrict unaligned access
        The memory controller will return an error if such a request is made. The benefit of this approach is the reduced complexity of the hardware.

Conclusion
    Unaligned memory access usually consumes more time, but it allows more efficient use of the available memory. The most common situation where you can encounter unaligned memory access are:
    1.  Casting variables to types of increased sizes
    2.  Accessing multiple bytes of data using pointers (especially when casting is involved)
