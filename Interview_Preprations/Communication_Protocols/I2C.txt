All these I2C modules supports four data transmission speeds.
    Standard (100 Kbps)
    Fast-mode (400 Kbps)
    Fast-mode plus (1 Mbps)
    High-speed mode (3.33 Mbps)
    
I2C Communication Protocol Basics
    It is only used for short-distance communications. 
    It is advantageous in terms of usage of wires, as it requires only 2 wires but 1008 devices can be supported by these 2 wires only.
     It is used for attaching lower-speed peripheral ICs to microcontrollers in short-distance communication. 
    Low-speed peripherals include external EEPROMs, digital sensors, I2C LCD, and temperature sensors.

    Three additional modes have been specified in this IC:
        1.  At 1 MHz: ‘Fast mode plus’.
        2.  3.4 MHz: ‘high-speed mode’.
        3.  5 MHz: ‘ultra-fast mode’.

    It also supports clock stretching, allowing a slave to hold the clock line low to indicate that it needs more time to process a command or data. In some cases, the slaves become slow. This may be because the data given to them is too lengthy or the time span for each clock cycle is too short, then the slaves force the clock low so that they can easily prepare the data before the next cycle starts. This phenomenon is known as “clock stretching”.

    The bus drivers of I2C are “open drain”, which means that they can pull a signal line low, but they are unable to drive it high. 
    
I2C Message Packet Format
    When the SCL line goes low, data is placed on the SDA line. 
    When the SCL line goes high, data is then sampled.

START/STOP CONDITIONS
    The master device pulls SDA (serial data) low and leaves SCL (serial clock) high in order to start the address frame. It alerts all the slave devices that a transmission is going to get started. If there are two or more master devices, then whichever master device brings the SDA low first will take ownership of the bus.
    Start condition: A high to low transition of SDA.
    Stop condition: A low to high transition of SDA.

7-bit Device Addressing
    After the Start condition, the first byte sent is known as the control byte. 
    The first seven bits of the control byte make up the slave address.

    1.  The first four bits are fixed.
    2.  The next three bits are set by hardware address pins (A0, A1, and A2) which allow the user to modify the I²C address. 
        It allows up to eight devices to operate on the I²C bus.
    3.  The eighth bit (LSB) is a data direction bit (R/W)
    4.  ‘0’ in LSB indicates that the Master will write information to a selected slave
    5.  ‘1’ in LSB indicates that the Master will read data from the slave
    6.  When the receiver gets its address, it has to generate the Acknowledge signal. 
        
10-bit Device Addressing
    1.  Instead of one, the two address words are used for device addressing.
    2.  The first address word contains conventional code as “11110” on MSBs to aware the slaves on the bus of 10-bits device address. 
        After that, it contains two MSBs of 10-bit address and R/W bit.
    3.  The second address word contains 8 least significant bits (LSBs) of the 10-bit address. 
        So this addition of bits ensures the backward compatibility with a 7-bit addressing scheme.

I2C Data Transmission Steps
    1.  In order to initiate communication on the I2C bus, the master must first send a start condition. 
    2.  A start condition is a specific pattern of signals on the clock and data lines that indicates to all devices on the bus that a new communication is about to begin.
    3.  After sending the start condition, the master sends the address of the slave it wants to communicate with. 
    4.  As mentioned earlier, each slave device has a unique 7-bit address, and the master specifies whether it wants to read from or write to the slave by setting the LSB of the address.
    5.  The slave device listens for its own address on the bus and responds with an acknowledge signal if it receives its own address. 
    6.  The acknowledge signal is a pulse on the data line that is pulled low by the slave for one clock cycle. 
    7.  This signal indicates to the master that the slave has received its address and is ready to communicate.
    8.  If the slave does not receive its own address, or if it is busy and unable to communicate, it does not send an acknowledge signal and the communication is terminated. 
    9.  The master can then retry the communication at a later time or communicate with a different slave.
    10. If the acknowledge signal is received, the master can then proceed to send a command or data to the slave. 
    11. The slave will respond with an acknowledge signal to indicate that it has received the data. 
    12. This process can be repeated multiple times to send and receive multiple bytes of data.
    13. It is important to note that the acknowledge signal is optional in some cases. 
    14. Some slaves may not send an acknowledge signal if they are not able to receive or process the data, or if they are configured to operate in a no-acknowledge mode. 
    15. In these cases, the master may need to use other methods to detect if the data was received or to check for errors.
    16. The command or data is sent as a series of bits on the data line, with each bit being clocked by the master’s clock signal.
    17. In addition to sending and receiving data, the master can also send special commands to the slave to control its behavior or to request specific information. 
    18. For example, the master can send a command to read a register on the slave, or to write data to a specific memory location. 
    19. The slave responds to these commands with the appropriate data or an acknowledge signal to indicate that the command was received and executed.
    20. To send multiple bytes of data, the master can simply send each byte one after the other, with the slave responding with an acknowledge signal after each byte to indicate that it has received the data. 
    21. The slave can also send multiple bytes of data to the master in a similar way, with the master acknowledging each byte as it is received.
    22. After the master has completed its communication with the slave, it sends a stop condition to end the transmission. 
    23. A stop condition is a specific pattern of signals on the clock and data lines that indicates to all devices on the bus that the communication is complete.
    24. The stop condition tells the slave that it can stop listening for data and can return to a low-power state. 
    25. It also releases the bus so that other masters or slaves can initiate communication.
    26. After the stop condition is sent, the master can then initiate a new communication by sending a start condition and the address of a different slave, or it can enter a low-power state to conserve energy.
    27. It is important to note that the stop condition is optional in some cases. 
    28. Some devices may not send a stop condition if they are configured to operate in a continuous mode, where communication is ongoing and data is transferred continuously without interruption. 
    29. In these cases, the master or slave may need to use other methods to detect the end of the transmission or to terminate the communication.

I2C Applications
    Embedded systems: I2C is commonly used in embedded systems to communicate with sensors, displays, and other peripherals. 
    Its simplicity and low power consumption make it an ideal choice for these types of applications.

I2C Limitations
    1.  Limited distance: 
        I2C is designed for communication over short distances, typically a few meters or less. 
        The length of the bus can be extended using repeaters or other techniques, but this can add cost and complexity to the system.
    2.  Limited number of devices: 
        I2C supports a maximum of 128 devices on a single bus, which may be limiting in some applications. 
        However, multiple buses can be used to connect more devices, or other protocols such as SPI (Serial Peripheral Interface) can be used.
    3.  Limited speed: 
        The speed of I2C communication is limited by the clock signal, which is generated by the master. 
        The maximum speed of I2C is typically a few MHz, which may not be sufficient for some applications.
    4.  Limited power: 
        I2C is designed for low-power communication and is not suitable for applications that require high-power or high-voltage communication.
    5.  Complexity: 
        I2C can be more complex to implement than some other serial communication protocols, especially in systems with multiple masters or slaves. 
        It may require additional hardware and software support to manage the communication and to ensure that the devices are properly synchronized.

Troubleshoot I2C communication
    1.  Check that the devices are properly connected to the bus and that the correct addresses are being used.
    2.  Verify that the devices are configured correctly and are communicating at the same speed.
    3.  Use a scope or logic analyzer to monitor the signals on the bus and ensure that the start and stop conditions, address, and data are being transmitted correctly.
    4.  Check for any hardware issues, such as damaged connectors or broken wires.
    5.  Check for any software issues, such as incorrect driver or library configurations.
    6.  Check for any external factors that may be causing interference, such as electromagnetic interference or power supply issues.
