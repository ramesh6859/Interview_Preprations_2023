c
=
Segmentation Fault:     Trying to read and write to an illegal memory location.
                        Error occurs while returning the address of a local variable.
Dangling Pointer:        Pointer which points to some non existing memory location.
Null Pointer:           Pointer that does not point to any memory location.
                        It represents an invalid memory location.
                        When a NULL value is assigned to a pointer then the pointer is considered as NULL pointer.

Compilation Process
1.  Preprocessing
    1.  All the lines starting with # will be interpreted.
    2.  Output is .i file. 
2.  Compilation
    1.  .i file is converted to assembly instructions .s file.  
    2.  Checks for syntax error.
    3.  Optionally optimise code.
3.  Assembly
    1.  Assembler converts .s file to object file .o file.
    2.  Contains actual instructions to be executed.
    3.  No linkage to other object files.
4.  Linking
    1.  Linking for their original function calls.
    2.  Library function calls are added.
    3.  Generate final executable .exe, .elf, .bin, .hex

.bin File Properties
1.  It has no memory reallocation.
2.  Data loaded directly to specified address.
3.  No symbol or debug info.
4.  Not in human readable format.
5.  Option to decode with Hex Dump Tool.

Cross Compilation
1.  List file (.lst)
    1.  Contains information about the cross compilation process, cross compiler details.
    2.  Contains 2 sections
        1.  Page header.
        2.  Command line
    3.  Work as index path for the program.
2.  Preprocessor Output File
    1.  Used for verifying the operations of Macros and conditional preprocessor directives.
    2.  File extension is cross compiler dependent.
3.  Object file (.obj)
    1.  Deals with data records for symbolic information, object code and debugging.
    2.  Details stored are
        1.  Reserved memory for global variables.
        2.  Public symbol (variable and function) names.
        3.  External symbol (variable and function) references.
        4.  Library files which to link.
        5.  Debugging information to help synchronize source lines with object code.
4.  Map file (.map)
    1.  Work as Linker file.
    2.  Details stored are
        1.  Page header.
        2.  Command Line.
        3.  CPU details.
        4.  Input Modules.
5.  Hex File (.hex)
    1.  Binary executable file created from the source code.

Memory Layout of C program
1.  Text Section:
    1.  The text section or code section contains the executable instructions of the program. 
    2.  This section is read-only and stores the machine code of the program.
2.  Data Section:
    1.  The data section contains two sub-sections: initialized data and uninitialized data.
    2.  Initialized data section contains global and static variables that are initialized with a specific value. 
    3.  This section is read-write, and the values of the variables remain constant throughout the program's execution.
    4.  Uninitialized data section, also known as the bss section, contains global and static variables that are not initialized with any value. 
    5.  This section is also read-write, but the values of the variables are initialized to zero.
3.  Stack Section:
    1.  The stack section is used to store the function calls and their local variables. 
    2.  This section grows and shrinks dynamically as functions are called and returned. 
    3.  The variables with automatic storage class are stored in this section.
4.  Heap Section:
    1.  The heap section is used to store dynamic memory allocated using functions such as malloc() and calloc(). 
    2.  The variables with a pointer type are stored in this section.


Storage Classes
Scope, Stored Memory and Default Value
1.  Automatic Storage Class:
    1.  The automatic storage class is the default storage class for all local variables. 
    2.  It is used to declare variables that have a temporary existence, such as those declared inside a function. 
    3.  Variables with automatic storage are created when the function is called and destroyed when the function returns.
    4.  Variables with the automatic storage class are stored in the stack memory. 
    5.  The default value of the automatic storage class is garbage or undefined, and it is not necessary to initialize them.
2.  Static Storage Class:
    1.  The static storage class is used to declare variables that have a permanent existence throughout the program's execution. 
    2.  Variables with static storage are initialized only once, and they retain their value throughout the program's lifetime.
    3.  Variables with static storage class are stored in the data segment of the program's memory. 
    4.  The default value of static variables is zero or null, and they are automatically initialized to this value.
3.  Register Storage Class:
    1.  The register storage class is used to declare variables that should be stored in the processor's register instead of the memory. 
    2.  This class is not widely used today because modern compilers are optimized enough to automatically allocate variables in the register.
    3.  Variables with register storage class have automatic storage duration, and their default value is undefined. 
    4.  It is not necessary to initialize them.
4.  Extern Storage Class:
    1.  The extern storage class is used to declare variables that are defined in other files or functions. 
    2.  These variables are declared in one file and can be accessed in another file or function by using the extern keyword.
    3.  Variables with the extern storage class are stored in the data segment of the program's memory, and their default value is zero or null.

List of Pointers
1.  Null Pointer
    1.  Points the base address of segment.
    2.  float *ptr = (float *)0;

2.  Dangling Pointer
    1.  Pointer pointing to a non existing memory location.

3.  Generic Pointer
    1.  Void Pointer
    2.  Void pointers are those pointers that point to a variable of any type. 
    3.  It is a generic pointer as it is not dependent on any of the inbuilt or user-defined data types while referencing. 
    4.  During dereferencing of the pointer, we require the correct data type to which the data needs to be dereferenced.
    5.  Void pointers are used mainly because of their nature of re-usability. 
    6.  It is reusable because any type of data can be stored.

    Example:
    int num1 = 20;          //variable of int datatype
    void *ptr;              //Void Pointer
    *ptr = &num1;           //Point the pointer to int data
    print("%d",(*(int*)ptr));   //Dereferencing requires specific data type

    char c = 'a';
    *ptr = &c;              //Same void pointer can be used to point to data of different type -> reusability
    print("%c",(*(char*)ptr));

4.  Wild Pointer
    1.  Pointer that has not been initialized.

5.  Complex Pointer

6.  Near Pointer
    1.  Pointer that points only 64 KB data segment or segment number 8.
    2.  Size - 2 bytes.

7.  Far Pointer
    1.  Pointer that point or access whole the residence memory of RAM.
    2.  Access all 16 segments.
    3.  Size - 4 bytes.

8.  Huge Pointer
    1.  Pointer that point or access whole the residence memory of RAM.
    2.  Access all 16 segments.
    3.  Size - 4 bytes.

Segmentation Fault
    Following are the reasons for the segmentation fault to occur:
    1.  While trying to dereference NULL pointers.
    2.  While trying to write or update the read-only memory or non-existent memory not accessible by the program such as code segment, kernel structures, etc.
    3.  While trying to dereference an uninitialized pointer that might have been pointing to invalid memory.
    4.  While trying to dereference a pointer that was recently freed using the free function.
    5.  While accessing the array beyond the boundary.

    Some of the ways where we can avoid Segmentation fault are:
    1.  Initializing Pointer Properly: 
        1.  Assign addresses to the pointers properly.
        2.  We can also assign the address of the matrix, vectors or using functions like calloc, malloc etc.
        3.  Only important thing is to assign value to the pointer before accessing it.
    2.  Minimize using pointers: 
        1.  Most of the functions in Embedded C such as scanf, require that address should be sent as a parameter to them. 
        2.  In cases like these, as best practices, we declare a variable and send the address of that variable to that function.
        3.  In the same way, while sending the address of variables to custom-defined functions, we can use the & parameter instead of using pointer variables to access the address.
    3.  Troubleshooting: 
        1.  Make sure that every component of the program like pointers, array subscripts, & operator, * operator, array accessing, etc as they can be likely candidates for segmentation error. 
        2.  Debug the statements line by line to identify the line that causes the error and investigate them.

Volatile Keyword
    The volatile keyword is mainly used for preventing a compiler from optimizing a variable that might change its behavior unexpectedly post the optimization. 
    Consider a scenario where we have a variable where there is a possibility of its value getting updated by some event or a signal, then we need to tell the compiler not to optimize it and load that variable every time it is called. 
    To inform the compiler, we use the keyword volatile at the time of variable declaration.

    Is it possible for a variable to be both volatile and const?
        The const keyword is used when we want to ensure that the variable value should not be changed. 
        However, the value can still be changed due to external interrupts or events. 
        So, we can use const with volatile keywords and it wonâ€™t cause any problem.

Macro Function
    1.  Macro functions are expanded by the preprocessor at the compile time.
    2.  Expressions passed to the Macro functions might get evaluated more than once.
    3.  Macro functions do not follow strict parameter data type checking.
    4.  Macro functions are hard to debug because it is replaced by the pre-processor as a textual representation which is not visible in the source code.

Inline Function
    1.  Inline functions are expanded by the compiler.
    2.  Expressions passed to Inline functions get evaluated once.
    3.  Inline functions follow strict data type checking of the parameters.
    4.  Easier to debug inline functions which is why it is recommended to be used over macro functions.

Reentrant Function
    1.  A function is called reentrant if the function can be interrupted in the middle of the execution and be safely called again (re-entered) to complete the execution. 
    2.  The interruption can be in the form of external events or signals or internal signals like call or jump. 
    3.  The reentrant function resumes at the point where the execution was left off and proceeds to completion.



