c
=
Segmentation Fault:     Trying to read and write to an illegal memory location.
                        Error occurs while returning the address of a local variable.
Dangling Pointer:        Pointer which points to some non existing memory location.
Null Pointer:           Pointer that does not point to any memory location.
                        It represents an invalid memory location.
                        When a NULL value is assigned to a pointer then the pointer is considered as NULL pointer.

Compilation Process
1.  Preprocessing
    1.  All the lines starting with # will be interpreted.
    2.  Output is .i file. 
2.  Compilation
    1.  .i file is converted to assembly instructions .s file.  
    2.  Checks for syntax error.
    3.  Optionally optimise code.
3.  Assembly
    1.  Assembler converts .s file to object file .o file.
    2.  Contains actual instructions to be executed.
    3.  No linkage to other object files.
4.  Linking
    1.  Linking for their original function calls.
    2.  Library function calls are added.
    3.  Generate final executable .exe, .elf, .bin, .hex

.bin file properties
1.  It has no memory reallocation.
2.  Data loaded directly to specified address.
3.  No symbol or debug info.
4.  Not in human readable format.
5.  Option to decode with Hex Dump Tool.


Memory Layout of C program
1.  Text section:
    1.  The text section or code section contains the executable instructions of the program. 
    2.  This section is read-only and stores the machine code of the program.
2.  Data section:
    1.  The data section contains two sub-sections: initialized data and uninitialized data.
    2.  Initialized data section contains global and static variables that are initialized with a specific value. 
    3.  This section is read-write, and the values of the variables remain constant throughout the program's execution.
    4.  Uninitialized data section, also known as the bss section, contains global and static variables that are not initialized with any value. 
    5.  This section is also read-write, but the values of the variables are initialized to zero.
3.  Stack section:
    1.  The stack section is used to store the function calls and their local variables. 
    2.  This section grows and shrinks dynamically as functions are called and returned. 
    3.  The variables with automatic storage class are stored in this section.
4.  Heap section:
    1.  The heap section is used to store dynamic memory allocated using functions such as malloc() and calloc(). 
    2.  The variables with a pointer type are stored in this section.


Storage Classes
Scope, Stored Memory and Default Value
1.  Automatic Storage Class:
    1.  The automatic storage class is the default storage class for all local variables. 
    2.  It is used to declare variables that have a temporary existence, such as those declared inside a function. 
    3.  Variables with automatic storage are created when the function is called and destroyed when the function returns.
    4.  Variables with the automatic storage class are stored in the stack memory. 
    5.  The default value of the automatic storage class is garbage or undefined, and it is not necessary to initialize them.
2.  Static Storage Class:
    1.  The static storage class is used to declare variables that have a permanent existence throughout the program's execution. 
    2.  Variables with static storage are initialized only once, and they retain their value throughout the program's lifetime.
    3.  Variables with static storage class are stored in the data segment of the program's memory. 
    4.  The default value of static variables is zero or null, and they are automatically initialized to this value.
3.  Register Storage Class:
    1.  The register storage class is used to declare variables that should be stored in the processor's register instead of the memory. 
    2.  This class is not widely used today because modern compilers are optimized enough to automatically allocate variables in the register.
    3.  Variables with register storage class have automatic storage duration, and their default value is undefined. 
    4.  It is not necessary to initialize them.
4.  Extern Storage Class:
    1.  The extern storage class is used to declare variables that are defined in other files or functions. 
    2.  These variables are declared in one file and can be accessed in another file or function by using the extern keyword.
    3.  Variables with the extern storage class are stored in the data segment of the program's memory, and their default value is zero or null.

List of pointers
1.  Null pointer
    1.  Points the base address of segment.
    2.  float *ptr = (float *)0;
2.  Dangling pointer
    1.  Pointer pointing to a non existing memory location.
3.  Generic pointer
    1.  void pointer
    2.  The pointer will not point to any data and therefore cannot be deference.
    3.  To use it we have to cast it to another kind of pointer first.
    4.  Pointer to point to data of different types at different times.
4.  Wild pointer
    1.  Pointer that has not been initialized.
5.  Complex pointer
6.  Near pointer
    1.  Pointer that points only 64 KB data segment or segment number 8.
    2.  Size - 2 bytes.
7.  Far pointer
    1.  Pointer that point or access whole the residence memory of RAM.
    2.  Access all 16 segments.
    3.  Size - 4 bytes.
8.  Huge pointer
    1.  Pointer that point or access whole the residence memory of RAM.
    2.  Access all 16 segments.
    3.  Size - 4 bytes.


