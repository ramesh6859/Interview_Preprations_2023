ISR
    ISR expands to Interrupt Service Routines. 
    These are the procedures stored at a particular memory location and are called when certain interrupts occur. 
    Interrupt refers to the signal sent to the processor that indicates there is a high-priority event that requires immediate attention. 
    The processor suspends the normal flow of the program, executes the instructions in ISR to cater for the high priority event. 
    Post execution of the ISR, the normal flow of the program resumes. 

Interrupt latency
    Interrupt latency refers to the time taken by ISR to respond to the interrupt. 
    The lesser the latency faster is the response to the interrupt event.

Interrupt Vector Table ( IVT)
    It is a table that contains vectors. 
    In embedded programming, vector means memory address. 
    Hence, a vector table is a table that contains memory addresses. 
    The interrupt vector table contains addresses ( function pointers) of interrupt service /routines and exception handler functions.
    The interrupt vector table is a table of memory addresses of interrupt/exception handler routines. 
    It defines where the code of a particular interrupt/exception routine is located in microcontroller memory.

What happens when Interrupt Occurs?
    An interrupt is generated by any hardware or software source.
    The processor suspends the currently running task as the response of the interrupt.
    After that, the processor then services the interrupt service routine (also known as interrupt handler) to service the interrupt that occurred.
    The processor then returns to the suspended task and resumes its normal program execution.

NVIC (Nested Vectored Interrupt Controller)
    A nested vectored interrupt controller is integrated inside the microcontroller chip. 
    The main responsibility of NVIC is to handle interrupts, prioritize interrupts, and minimize interrupt latency. 
    ARM Cortex-M4 microcontroller supports 240 system and peripheral interrupts and NVIC performs interrupts management with the help of an interrupt vector table. 

Main responsibilities of NVIC:
    Interrupts handling
    Programmable interrupt feature
    Interrup tail chaining
    Low interrupt latency management

NVIC Interrupts Handling
    The major role of NVIC is to handle the interrupt. 
    Cortex-M includes a vector table that contains the address of the interrupt service routines (ISRs) along with each interrupt number. 
    Below is given the list of steps that are evaluated whenever an interrupt occurs.
        The Execution of the current task is suspended.
        The current state of the program is preserved.
        The NVIC initiates a call to that vector table, locates the interrupt number that has occurred, picks the address of the service routine from that vector table.
        After that, the service corresponding to the interrupt is executed.
        The state of the program is retained and normal execution of the task is resumed.

Interrupt Latency
    NVIC helps to prioritize the interrupts and it helps in reducing the interrupt latency. 
    Interrupt latency is defined as the time interval from the time of interrupt occurrence and the time at which the 1st statement of interrupt service routine is executed. 
    NVIC helps in reducing the interrupt latency by providing a faster response to the application. 
    This in turn executes the interrupts quickly and resumes the program flow.

Configuring an Interrupt
    The first 16 exceptions of nested vectored interrupt controller (NVIC) are dedicated as system exceptions and we (as a user) are not allowed to configure or change anything of these exceptions, the system handles all this. 
    The next 240 interrupts are user interrupts and it is our duty to configure and prioritize all the interrupts we need in our application out of these 16 â€“ 255 interrupts. 
    
    1.  The first step of configuring the interrupt is enabling the interrupts globally. 
        Every microcontroller has a dedicated register of enabling all the interrupts present in the microcontroller, we will set the specific bit of the register and enable all the interrupts of the microcontroller. 
        We can see the registered name, address, and enable bit from the technical reference manual of that microcontroller.
    2.  In the next step, we will set the priority of each interrupt we are going to use. 
        This is an optional step and it needs to be implemented if we want to prioritize our interrupts. 
        If priority is not our need at the time we can simply skip this step. 
        Doing so will set the priority of all the interrupts to 0, which is the highest configurable priority of an interrupt and if 2 interrupts occur simultaneously, the system will decide which interrupt to handle first.
    3.  The last step is enabling the interrupts we want to use. 
        For instance, if we want to use only interrupts 20 and 21 we do not need to enable all the 240 interrupts. 
        we will only enable these 2 interrupts in our application.

Role of Interrupt Vector Table in Interrupt Processing 
    When an interrupt x occurs, the interrupt request will be sent to NVIC. 
    If NVIC accepts the exception/interrupt request x, the next step of NVIC to find the starting address of the interrupt service routine or exception handler. 
    The starting address of the respective ISR or exception handler is stored inside the interrupt vector table. 
    Then NVIC uses exception number x to calculate the address of the exception by looking up the interrupt vector table and use the content of that memory address (which is an address of the respective exception handler) to execute the exception handler.
    Program counter will be loaded with the address of the exception handler and the CPU starts to execute the exception routine.


    
    