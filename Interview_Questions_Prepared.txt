https://open4tech.com/category/embedded-systems/page/3/
Open Drain Output vs. Push-Pull Output
STM32 Bootloader Design – Part 1
STM32 Bootloader Design – Part 2
Slew Rate of Microcontroller Outputs
Function Calls on ARM Cortex-M Microprocessors


Start-up code
	A start-up code is called prior to the main function, it creates a basic platform for the application. 
	It is a small block of code that is written in assembly language.
	There are the following parts of the start-up code.
		Declaration of the Stack area.
		Declaration of the Heap area.
		Vector table.
		Reset handler code.
		Other exception handler code.

Start-up code steps
	Start-up code for C programs usually consists of the following actions, performed in the order described:
		Disable all interrupts.
		Copy any initialized data from ROM to RAM.
		Zero the uninitialized data area.
		Allocate space for and initialize the stack.
		Initialize the processor’s stack pointer.
		Create and initialize the heap.
		Enable interrupts.
		Call the main.
		
Software Development Life Cycle
	There are five main stages of the software development life cycle:
	1.	Requirement: 
		In this phase, the customer fills a requirement form to write what they actually need from the product.
	2.	Analysis: 
		In this phase, the requirements are converted into documents and cover all the functional requirement specifications.
	3.	Design: 
		In this phase, the design of the product is prepared. The requirements are converted into architecture design. This phase includes:
		1.	Low-Level Design Documentation (LLD) 
		2.	High-Level Design Documentation (HLD) 
	4.	Coding:
		In this phase, the requirements are converted into a coded form.
	5.	Testing:
		In this phase, the software under development is tested for product quality. This includes 2 types:
		1.	Static testing 
		2.	Dynamic testing 
	6.	Maintenance:
		In this phase, the maintenance of the product is implemented. 
		
Levels of testing in embedded systems
	There are four levels of testing in embedded systems: 
	1.	Unit testing 
	2.	Integration testing 
	3.	System testing 
	4.	User acceptance testing 
	


Interview Questions Answers
1.	Which cross compiler is used for Raspberry Pi?
A.	If you're developing in a higher-level programming language like Python, you typically don't need to use a cross-compiler since the code is interpreted at runtime. However, you may need to install specific libraries or modules that are optimized for the ARM architecture used by the Raspberry Pi.

----------------------------------------------
ADC working in microcontroller
power on reset in embedded system
watchdog timer in microcontroller
startup code
bootloading process
linker script

1.  Set the last bits of a input number
    example: (0,3) - 00000111
2.  Generate the binary of a number and get the mirror image of that binary number from the middle.
4.  String Manipulation
    a3[b]c  -   abbbc
    abc2[pq]    -   abcpqpq

Interview Questions
-------------------
MODBUS
    MODBUS Protocol.
    How many bytes can we send in a single MODBUS frame at most?

I2C
    I2C Where I am used.
    A data frame of I2C.
    Between start bit and slave address anything.
    Explain slave address.
    what the slave address truly includes.
    All 8 bits of slave address is device address.
    How many I2C sensors can connect to microcontroller.

SPI
    Maximum how many slaves we can communicate
    What is the maximum speed of communication.

MQTT
    Way MQTT works.
    What are the main parts of MQTT?
    Steps to see the data in the portal via MQTT while connecting to the cloud.
    What is the very first step needed to do when a device need to connect to MQTT.

Microcontroller
    PIC and ARM architectural differences
    7 modes of ARM architecture.
    Mode of architecture in PIC.
    What a microcontroller's 32-bit or 16-bit designations represent.

Interrupt
    Where it stores the return address.
    How the microcontroller pauses the current execution of the program when an interrupt comes.
    What registers are involved when an interrupt happens while switching.
    Interrupt latency.
    Measure the latency.

C
    Compilation error - Undefined reference, solve, and where it comes.
    What are the different concepts we are basically using in embedded c most?
    What are the bit fields in C.
    Memory optimization is implemented.
    Stack optimization is implemented.
    How to calculate the stack memory the function is using.
    Send big data efficiently on a 8 bit bus using Unions.

Serial
    How can we configure and communicate between 2 Zigbee modules, what are the basics that we need to take care of?

Git
    How to take one particular commit from another branch.

Others
        Which cross compiler is used for Raspberry Pi?
    What is the project you have worked on any RTOS was there, and how you are doing the scheduling?
    Program for scheduling in Baremetal device.
    There is some kind of time-slicing and scheduling idea.
    What are the sequence when powering up the board, how it will be started and executed and able to check the display?
    How is the program flashed to the microcontroller, debugger pin (via). Interface with the program to the board.
    Breakpoints - software breakpoint and hardware breakpoint.
    Software development tools that we have used so far.
    Why there is different options frequency of oscillation in ADC conversion?
    What is the disadvantage of selecting maximum frequency in ADC conversion?
    Almanac in GPS.
    How do you ensure that threading is parallely executed in python.
    

    


